<?php

/**
 * Implements hook_install().
 */
function bootstrap_tour_install() {
  module_load_include('inc', 'inline_entity_form', 'includes/entity.inline_entity_form');
  module_load_include('inc', 'bootstrap_tour', 'includes/bootstrap_tour.controller');
  bootstrap_tour_create_field_collection('field_bootstrap_tour_step');
  bootstrap_tour_create_field_api_fields();
}

/**
 * Implements hook_uninstall().
 */
function bootstrap_tour_uninstall() {
  field_attach_delete_bundle('bootstrap_tour', 'bootstrap_tour');
}

/**
 * Implements hook_schema().
 */
function bootstrap_tour_schema() {
  $schema = array();

  if (db_table_exists('bootstrap_tour_old')) {
    /**
     * Legacy compatibility. If the 'bootstrap_tour' table exists, then we need
     * to keep it temporarily, so that we can migrate from it to the new
     * 'bootstrap_tour_tour' and 'bootstrap_tour_step' tables. Once that
     * migration is complete, the update hook will delete this table, and then
     * it will be gone forever.
     *
     * You may be saying "why not remove this from hook_schema() though, since
     * that won't delete the table if it already exists?" and you're a very
     * smart and wise person. The answer is that we need to keep this in
     * hook_schema() because we need the "export" key to exist on it (which you
     * can see below), otherwise the ctools function to load default/featurized/
     * exported/in-code tours doesn't know that they exist and just returns NULL.
     * And since we need to load legacy 1.x tours as part of the migrating to
     * the new 2.x tables, we need ctools to know about it until that migration
     * is complete.
     *
     * However, we can't actually name it bootstrap_tour because then
     * features makes a boostrap_tour_features_api function that returns
     * it as a key, which conflicts with the one entity creates and causes
     * update errors.
     *
     * @see bootstrap_tour_load_legacy_tours();
     */
    $schema['bootstrap_tour_old'] = bootstrap_tour_db_legacy_table();
  }

  $schema['bootstrap_tour_tour'] = bootstrap_tour_db_tour_table();
  $schema['bootstrap_tour_step'] = bootstrap_tour_db_step_table();
  $schema['bootstrap_tour_user_status'] = bootstrap_tour_db_user_table();

  return $schema;
}

/**
 * Returns the table definition for the table which holds the tours.
 */
function bootstrap_tour_db_tour_table() {
  return array(
    'description' => t('Bootstrap tours courtesy of the Bootstrap Tours module'),
    'fields' => array(
      'bootstrap_tour_id' => array(
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'title' => array(
        'description' => 'Human readable name for the tour used for administrative purposes.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'name' => array(
        'description' => 'Unique ID for tours used to identify them programmatically, generated from the name.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'language' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The language of the tour',
      ),
      'description' => array(
        'description' => 'A description of the site tour, used for administrative purposes.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'roles' => array(
        'description' => 'A comma separated list of roles that can access this tour.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'autorun' => array(
        'description' => 'Boolean indicating whether the tour should automatically start when the start path is visited.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'start_path' => array(
        'description' => 'The path at which the tour should begin.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'enabled' => array(
        'description' => 'Boolean indicating whether the tour is enabled or disabled.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'wandered_off_message' => array(
        'description' => 'Boolean indicating whether the tour should show wandered off message.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('bootstrap_tour_id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
}

/**
 * Returns the table definition for the table which holds the tour steps.
 */
function bootstrap_tour_db_step_table() {
  return array(
    'description' => t('Individual Bootstrap tour steps for Bootstrap Tours (many-to-one).'),
    'fields' => array(
      'bootstrap_tour_step_id' => array(
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'no export' => TRUE,
      ),
      'path' => array(
        'description' => 'The path upon which the step should be displayed.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'selector' => array(
        'description' => 'The CSS Selector to which the step should be attached.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'placement' => array(
        'description' => 'Location of the popup.',
        'type' => 'varchar',
        'length' => '6',
      ),
      'title' => array(
        'description' => 'Title of the popup.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'content' => array(
        'description' => 'Content of the popup.',
        'type' => 'text',
        'size' => 'big',
      ),
      'content_text_format' => array(
        'description' => 'The text format of the content field.',
        'type' => 'varchar',
        'length' => '255',
      ),
      'script_callbacks' => array(
        'description' => 'Script callbacks.',
        'type' => 'text',
        'size' => 'big',
      ),
    ),
    'primary key' => array('bootstrap_tour_step_id'),
  );
}

/**
 * Returns the table definition for the table which holds the user tour status.
 */
function bootstrap_tour_db_user_table() {
  return array(
    'description' => t('Bootstrap tours per user status courtesy of the Bootstrap Tours module'),
    'fields' => array(
      'bootstrap_tour_id' => array(
        'description' => 'ID field used for internal lookups.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The user ID.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Tour watched status.',
        'type' => 'int',
        'default' => 0,
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('bootstrap_tour_id', 'uid'),
  );
}

/**
 * Returns the table definition for the table which held tours in 1.x.
 */
function bootstrap_tour_db_legacy_table() {
  return array(
    'description' => t('Bootstrap tours courtesy of the Bootstrap Tours module'),
    'export' => array(
      'primary_key' => 'name',
      'api' => array(
        'owner' => 'bootstrap_tour',
        'api' => 'bootstrap_tour_tour',
        'minimum_version' => '1',
        'current_version' => '1',
      ),
      'default hook' => 'default_bootstrap_tour',
    ),
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for tours used to identify them programmatically, generated from the name.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Human readable name for the tour used for administrative purposes.',
      ),
      'roles' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'A comma separated list of roles that can access this tour.',
      ),
      'btid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE,
      ),
      'autorun' => array(
        'description' => 'Boolean indicating whether the tour should automatically start when the path of the first step is loaded.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'description' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'A description of the site tour, used for administrative purposes.',
      ),
      'steps' => array(
        'type' => 'blob',
        'description' => 'A serialized array of tour steps.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('btid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );
}

/**
 * Sets up the legacy step field.
 */
function bootstrap_tour_setup_step_field() {
  $field = array(
    'field_name' => 'bootstrap_tour_step_reference',
    'type' => 'entityreference',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'settings' => array(
      'target_type' => 'bootstrap_tour_step',
      'handler_settings' => array('target_bundles' => NULL),
    ),
    'locked' => TRUE,
  );
  field_create_field($field);
  $instance = array(
    'field_name' => 'bootstrap_tour_step_reference',
    'entity_type' => 'bootstrap_tour',
    'bundle' => 'bootstrap_tour',
    'label' => 'Tour Steps',
    'widget' => array(
      'weight' => '10',
      'type' => 'inline_entity_form',
      'module' => 'inline_entity_form',
      'active' => 1,
      'settings' => array(
        'fields' => array(),
        'type_settings' => array(
          'allow_existing' => 0,
          'match_operator' => 'CONTAINS',
          'delete_references' => 1,
          'override_labels' => 1,
          'label_singular' => 'step',
          'label_plural' => 'steps',
        ),
      ),
    ),
    'settings' => array(
      'target_type' => 'bootstrap_tour_step',
      'handler_settings' => array('target_bundles' => NULL),
    ),
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'type' => 'entityreference_label',
      ),
    ),
  );
  field_create_instance($instance);
}

/**
 * Creates fields via Field API that are translatable.
 */
function bootstrap_tour_create_field_api_fields() {
  $fields = array(
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'widget' => 'text_textarea',
      'settings' => array(
        'text_processing' => '1',
      ),
      'description' => t('Tour description.'),
      'required' => FALSE,
    ),
  );

  foreach ($fields as $name => $field_info) {
    $field = array(
      'field_name' => 'field_bs_tour_' . $name,
      'type' => $field_info['type'],
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => TRUE,
    );

    field_create_field($field);
    $instance = array(
      'entity_type' => 'bootstrap_tour',
      'bundle' => 'bootstrap_tour',
      'field_name' => 'field_bs_tour_' . $name,
      'label' => $field_info['label'],
      'required' => $field_info['required'],
      'description' => $field_info['description'],
      'settings' => $field_info['settings'],
      'widget' => array(
        'type' => $field_info['widget'],
      ),
    );

    field_create_instance($instance);
  }


}

/**
 * Migrates step data from custom entity structure to field collection.
 */
function bootstrap_tour_migrate_field_data() {
  $fields = array('description');
  foreach (entity_load_multiple_by_name('bootstrap_tour') as $tour) {
    $tour->language = language_default('language');
    foreach ($fields as $field) {
      if (!empty($tour->$field)) {
        $tour->{'field_bs_tour_' . $field}[$tour->language][0]['value'] = $tour->$field;
      }
    }
    entity_save('bootstrap_tour', $tour);
  }
}

/**
 * Creates step field collection and adds it to the tour entity.
 */
function bootstrap_tour_create_field_collection($bundle_name) {
  // Create a field collection field to use for the steps.
  $field = array(
    'field_name' => $bundle_name,
    'type' => 'field_collection',
    'cardinality' => -1,
    'locked' => TRUE,
  );
  field_create_field($field);

  $instance = array(
    'field_name' => $bundle_name,
    'entity_type' => 'bootstrap_tour',
    'bundle' => 'bootstrap_tour',
    'label' => 'Tour steps',
    'weight' => 10,
    'settings' => array(),
    'widget' => array(
      'type' => 'field_collection_embed',
      'label' => 'Tour steps',
      'settings' => array(),
    ),
  );
  field_create_instance($instance);

  // Metadata about the fields that will be added to the field collection.
  $translatable_fields = array(
    'title' => array(
      'label' => t('Popup Title'),
      'type' => 'text',
      'widget' => 'text_textfield',
      'settings' => array(),
      'description' => '',
      'required' => TRUE,
    ),
    'content' => array(
      'label' => t('Popup Content'),
      'type' => 'text',
      'widget' => 'text_textarea',
      'settings' => array(
        'text_processing' => '1',
      ),
      'description' => '',
      'required' => FALSE,
    ),
  );
  $untranslatable_fields = array(
    'selector' => array(
      'label' => t('Selector'),
      'type' => 'text',
      'widget' => 'text_textfield',
      'settings' => array(),
      'required' => TRUE,
      'description' => t('The CSS Selector to which the step should be attached.'),
    ),
    'placement' => array(
      'label' => t('Placement'),
      'type' => 'list_text',
      'widget' => 'select',
      'description' => '',
      'required' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          'top' => t('Top'),
          'bottom' => t('Bottom'),
          'left' => t('Left'),
          'right' => t('Right'),
        ),
      ),
    ),
    'callbacks' => array(
      'required' => FALSE,
      'label' => t('Script callbacks'),
      'type' => 'text_long',
      'widget' => 'text_textarea',
      'settings' => array(),
      'description' => '',
    ),
    'path' => array(
      'label' => t('Path'),
      'type' => 'text',
      'widget' => 'text_textfield',
      'settings' => array(),
      'required' => FALSE,
      'description' => t('Upon which path should this step be displayed? If subsequent steps will use the same path as previous step(s), you can leave this blank. Enter &lt;front&gt; for the front page.'),
    ),
  );

  // Add the translatable fields to the collection.
  foreach ($translatable_fields as $name => $field_info) {
    $field = array(
      'field_name' => 'field_bs_tour_step_' . $name,
      'type' => $field_info['type'],
      'cardinality' => 1,
      'translatable' => TRUE,
      'locked' => TRUE,
    );
    field_create_field($field);
    $instance = array(
      'entity_type' => 'field_collection_item',
      'field_name' => 'field_bs_tour_step_' . $name,
      'bundle' => $bundle_name,
      'label' => $field_info['label'],
      'required' => $field_info['required'],
      'description' => $field_info['description'],
      'settings' => $field_info['settings'],
      'widget' => array(
        'type' => $field_info['widget'],
      ),
    );
    field_create_instance($instance);
  }

  // Add the untranslatable fields to the collection.
  foreach ($untranslatable_fields as $name => $field_info) {
    $field = array(
      'field_name' => 'field_bs_tour_step_' . $name,
      'type' => $field_info['type'],
      'settings' => $field_info['settings'],
      'cardinality' => 1,
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    field_create_field($field);
    $instance = array(
      'entity_type' => 'field_collection_item',
      'field_name' => 'field_bs_tour_step_' . $name,
      'bundle' => $bundle_name,
      'label' => $field_info['label'],
      'required' => $field_info['required'],
      'description' => $field_info['description'],
      'widget' => array(
        'type' => $field_info['widget'],
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Migrates step data from custom entity structure to field collection.
 */
function bootstrap_tour_migrate_step_data($bundle_name) {
  $untranslatable_fields = array('path', 'selector', 'placement');
  $translatable_fields = array('title', 'content');
  foreach (entity_load_multiple_by_name('bootstrap_tour') as $tour) {
    $tour->language = LANGUAGE_NONE;
    if (module_exists('entity_translation')) {
      $tour->language = language_default('language');
    }
    entity_save('bootstrap_tour', $tour);
    if (!empty($tour->bootstrap_tour_step_reference[LANGUAGE_NONE])) {
      $steps = entity_load('bootstrap_tour_step', array_column($tour->bootstrap_tour_step_reference[LANGUAGE_NONE], 'target_id'));
      foreach ($steps as $step_id => $step) {
        $field_data = array(
          'field_name' => $bundle_name,
        );
        foreach ($untranslatable_fields as $field) {
          if (!empty($step->$field)) {
            $field_data['field_bs_tour_step_' . $field][LANGUAGE_NONE][0]['value'] = $step->$field;
          }
        }
        foreach ($translatable_fields as $field) {
          if (!empty($step->$field)) {
            $field_data['field_bs_tour_step_' . $field][$tour->language][0]['value'] = $step->$field;
          }
        }
        $field_data['field_bs_tour_step_callbacks'][$tour->language][0]['value'] = $step->script_callbacks;
        $field_data['field_bs_tour_step_content'][$tour->language][0]['format'] = $step->content_text_format;

        /* @var FieldCollectionItemEntity $field_collection_item */
        $field_collection_item = entity_create('field_collection_item', $field_data);
        $field_collection_item->setHostEntity('bootstrap_tour', $tour);
        $field_collection_item->save();
        entity_delete('bootstrap_tour_step', $step_id);
      }
    }
  }
  field_delete_instance(field_read_instance('bootstrap_tour_step', 'bootstrap_tour_step_reference', 'bootstrap_tour_step_reference'));
  field_delete_field('bootstrap_tour_step_reference');
}

/**
 * Loads all 1.x tours from both exported Features and from the DB.
 *
 * @return array
 */
function bootstrap_tour_load_legacy_tours() {
  ctools_include('export');
  $tours = ctools_export_crud_load_all('bootstrap_tour_old');
  return $tours;
}

/**
 * Upgrade 1.x tours to the new 2.x Entity format, then delete the old table.
 */
function bootstrap_tour_update_7200() {
  module_load_include('inc', 'inline_entity_form', 'includes/entity.inline_entity_form');
  module_load_include('inc', 'bootstrap_tour', 'includes/bootstrap_tour.controller');
  if (!module_exists('inline_entity_form') && !module_enable(array('inline_entity_form'))) {
    // If you drop in 2.x and try to run updates, Drupal won't complain even though
    // 2.x has a hard dependency on Inline Entity Form. So, we check for that explicitly.
    throw new DrupalUpdateException(t('Bootstrap Tour 2.x requires the Inline Entity Form module which is not installed.'));
    return;
  }
  // Rename bootstrap_tour table so doesn't conflict
  // @see bootstrap_tour_schema().
  if (db_table_exists('bootstrap_tour')) {
    db_rename_table('bootstrap_tour', 'bootstrap_tour_old');
    drupal_get_complete_schema(TRUE);
    // Make sure relavent caches are clear
    cache_clear_all('features_api', 'cache');
    cache_clear_all('entity_info', 'cache', TRUE);
    drupal_static_reset('entity_get_info');
    drupal_static_reset('features_get_components');
    drupal_static_reset('features_get_components_by_key');
  }

  // First we need to create the two new tables.
  db_create_table('bootstrap_tour_tour', bootstrap_tour_db_tour_table());
  db_create_table('bootstrap_tour_step', bootstrap_tour_db_step_table());
  bootstrap_tour_setup_step_field();

  // Now we need to load all of the 1.x tours and re-save them as 2.x entities.
  $old_tours = bootstrap_tour_load_legacy_tours();
  foreach ($old_tours as $tour) {
    $tour = (array) $tour;
    $steps = $tour['steps'];
    unset($tour['steps']);

    // Steps are their own entities now so we need to save them as such.
    foreach ($steps as $index => $step) {
      $new_step = entity_create('bootstrap_tour_step', array(
        'path' => isset($step['path']) ? $step['path'] : '',
        'selector' => $step['selector'],
        'placement' => $step['placement'],
        'title' => $step['title'],
        'content' => $step['content'],
        'content_text_format' => $step['format'],
      ));
      $new_step->save();
      if (!empty($new_step->bootstrap_tour_step_id)) {
        $tour['bootstrap_tour_step_reference'][LANGUAGE_NONE][$index]['target_id'] = $new_step->bootstrap_tour_step_id;
      }
    }

    $entity = entity_create('bootstrap_tour', $tour);
    $entity->old_tour = $tour;
    $entity->save();
  }

  // Now we need to make sure the numbers of old vs. new match so that we can be
  // sure the upgrade went successfully. If so, we can delete the old DB table.
  $new_tours = entity_load('bootstrap_tour');

  if ($count = count($old_tours)) {
    if (count($new_tours) === $count) {
      db_drop_table('bootstrap_tour_old');
      return t('If you have any Tours in exported Features, you will have to recreate them now.');
    }
    else {
      throw new DrupalUpdateException(t('Bootstrap Tour failed to upgrade old tours to the new format.'));
    }
  }
}

/**
 * Remove orphaned steps.
 */
function bootstrap_tour_update_7201() {
  $subquery = ' NOT in (SELECT bootstrap_tour_step_reference_target_id FROM {field_revision_bootstrap_tour_step_reference})';
  foreach (array_keys(field_info_instances('bootstrap_tour_step', 'bootstrap_tour_step')) as $field_name) {
    db_query("DELETE from {field_data_" . $field_name . "} WHERE entity_type = 'bootstrap_tour_step' AND entity_id " . $subquery);
    db_query("DELETE from {field_revision_" . $field_name . "} WHERE entity_type = 'bootstrap_tour_step' AND entity_id " . $subquery);

  }
  db_query('DELETE from {bootstrap_tour_step} WHERE bootstrap_tour_step_id ' . $subquery);
}

/**
 * Add user watched state tracking and script callback support.
 */
function bootstrap_tour_update_7202() {
  if (!db_table_exists('bootstrap_tour_user_status')) {
    db_create_table('bootstrap_tour_user_status', bootstrap_tour_db_user_table());
  }
  if (!db_field_exists('bootstrap_tour_step', 'script_callbacks')) {
    db_add_field('bootstrap_tour_step', 'script_callbacks', array(
        'description' => 'Script callbacks.',
        'type' => 'text',
        'size' => 'big',
      )
    );
  }
}

/**
 * Add option for disabling wandered off message.
 */
function bootstrap_tour_update_7203() {
  if (!db_field_exists('bootstrap_tour_tour', 'wandered_off_message')) {
    db_add_field('bootstrap_tour_tour', 'wandered_off_message', array(
      'description' => 'Boolean indicating whether the tour should show wandered off message.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 1,
    ));
  }
}

/**
 * Add the {bootstrap_tour_tour}.language field.
 */
function bootstrap_tour_update_7204() {
  // Set the target table and field name.
  $table_name = 'bootstrap_tour_tour';
  $field_name = 'language';

  // Don't add the new field if it already exists.
  if (!db_field_exists($table_name, $field_name)) {
    // Describe the new field.
    $field_spec = array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The language of the tour',
    );

    // Add it and update the primary key.
    db_add_field($table_name, $field_name, $field_spec);
  }
}

/**
 * Moves {bootstrap_tour_step} to a field_collection.
 */
function bootstrap_tour_update_7300() {
  module_enable(['field_collection']);
  cache_clear_all('field_info_types:', 'cache_field', TRUE);
  if (db_table_exists('bootstrap_tour_step')) {
    $bundle_name = 'field_bootstrap_tour_step';
    if (!field_info_field($bundle_name)) {
      bootstrap_tour_create_field_collection($bundle_name);
    }
    bootstrap_tour_migrate_step_data($bundle_name);
    $translations = variable_get('entity_translation_entity_types', array());
    $translations['bootstrap_tour'] = 'bootstrap_tour';
    $translations['field_collection_item'] = 'field_collection_item';
    variable_set('entity_translation_entity_types', $translations);
  }

  if (!field_info_field('field_bs_tour_description')) {
    bootstrap_tour_create_field_api_fields();
  }
  if (module_exists('title') && module_exists('entity_translation')) {
    title_field_replacement_toggle('bootstrap_tour', 'bootstrap_tour', 'title');
  }
  return t('Successfully migrated data.');
}
