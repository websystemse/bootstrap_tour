<?php

/**
 * @file
 * bootstrap_tour.module
 */

/**
 * Implements hook_entity_info().
 */
function bootstrap_tour_entity_info() {
  $bootstrap_tour_entity_info['bootstrap_tour'] = array(
    'label' => t('Site Tour'),
    'entity class' => 'Entity',
    'controller class' => 'BootstrapTourEntityController',
    'views controller class' => 'EntityDefaultViewsController',
    'base table' => 'bootstrap_tour_tour',
    'fieldable' => TRUE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'bootstrap_tour_id',
      'label' => 'title',
      'name' => 'name',
      'language' => 'language',
    ),
    'module' => 'bootstrap_tour',
    'access callback' => 'bootstrap_tour_admin_access',
    'static cache' => TRUE,
    'admin ui' => array(
      'path' => 'admin/structure/tours',
      'controller class' => 'BootstrapTourUIController',
      'file' => 'includes/bootstrap_tour.admin.inc',
    ),
    'bundles' => array(
      'bootstrap_tour' => array(
        'label' => t('Site Tours'),
        'admin' => array(
          'path' => 'admin/structure/tours',
          'access arguments' => array('administer bootstrap tours'),
        ),
      ),
    ),
    'translation' => array(
      'entity_translation' => array(
        'base path' => 'admin/structure/tours/manage/%bootstrap_tour',
      ),
    ),
    'field replacement' => array(
      'title' => array(
        'field' => array(
          'type' => 'text',
          'cardinality' => 1,
          'translatable' => TRUE,
        ),
        'instance' => array(
          'label' => t('Title'),
          'description' => '',
        ) + array(
          'required' => TRUE,
          'settings' => array(
            'text_processing' => 0,
          ),
          'widget' => array(
            'weight' => -5,
          ),
          'display' => array(
            'default' => array(
              'type' => 'hidden',
            ),
          ),
        ),
        'additional keys' => array(
          'format' => 'format',
        ),
      ),
    ),
    'efq bundle conditions' => TRUE,
  );

  $version = db_select('system', 's')
    ->fields('s', ['schema_version'])
    ->condition('s.type', 'module')
    ->condition('s.name', 'bootstrap_tour')
    ->execute()
    ->fetchCol();

  if ($version > 7300) {
    $bootstrap_tour_entity_info['bootstrap_tour_step'] = array(
      'label' => t('Site Tour Step'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'bootstrap_tour_step',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'bootstrap_tour_step_id',
        'label' => 'title',
        'language' => 'language',
      ),
      'static cache' => TRUE,
      'module' => 'bootstrap_tour',
      'access callback' => 'bootstrap_tour_admin_access',
      'views controller class' => 'EntityDefaultViewsController',
      'inline entity form' => array(
        'controller' => 'BootstrapTourStepInlineEntityFormController',
        'file' => 'includes/bootstrap_tour_step.inline_entity_form.inc',
      ),
    );

  }
  return $bootstrap_tour_entity_info;
}

/**
 * Implements hook_menu().
 */
function bootstrap_tour_menu() {
  $items = array();

  $items['admin/structure/tours'] = array(
    'title' => 'Site Tours',
    'access arguments' => array('administer bootstrap tours'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/tours/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer bootstrap tours'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_tour_admin_settings'),
    'file' => 'includes/bootstrap_tour.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['bootstrap_tour/ajax/end_current_tour'] = array(
    'title' => 'AJAX callback to end current tour',
    'page callback' => 'bootstrap_tour_end_current_tour',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['bootstrap_tour/ajax/restart_tour'] = array(
    'title' => 'AJAX callback to restart a given tour',
    'page callback' => 'bootstrap_tour_restart_tour',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['tours'] = array(
    'title' => 'Site Tours',
    'access callback' => 'bootstrap_tour_tours_access_callback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_tour_tours_form'),
    'file' => 'includes/bootstrap_tour.tours.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['user/%/tours'] = array(
    'title' => 'Site Tours',
    'access callback' => 'bootstrap_tour_tours_access_callback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_tour_tours_form'),
    'file' => 'includes/bootstrap_tour.tours.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/me/tours'] = array(
    'title' => 'Site Tours',
    'page callback' => 'bootstrap_tour_tours_redirect',
    'access callback' => 'bootstrap_tour_tours_access_callback',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bootstrap_tour_permission() {
  return array(
    'administer bootstrap tours' => array(
      'title' => t('Administer bootstrap tours'),
      'description' => t('Allows a user to add, edit, and delete bootstrap tours.'),
    ),
  );
}

/**
 * Admin access callback.
 */
function bootstrap_tour_admin_access($op, $tour = NULL, $account = NULL) {
  return user_access('administer bootstrap tours', $account);
}

/**
 * Bootstrap Tour access callback.
 */
function bootstrap_tour_tours_access_callback() {
  $tours = bootstrap_tour_load_all();
  foreach ($tours as $tour) {
    if (bootstrap_tour_access($tour)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Redirect to users tours.
 */
function bootstrap_tour_tours_redirect() {
  global $user;
  drupal_goto('user/' . $user->uid . '/tours');
}

/**
 * Implements hook_views_api().
 */
function bootstrap_tour_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_libraries_info().
 *
 * Tell Drupal about the Bootstrap Tour library.
 */
function bootstrap_tour_libraries_info() {
  $libraries['bootstrap_tour'] = array(
    'name' => 'Bootstrap Tour',
    'vendor url' => 'http://bootstraptour.com',
    'download url' => 'https://github.com/sorich87/bootstrap-tour/releases',
    'path' => 'build',
    'version' => '0.9.3',
    // @TODO: Move this into version_callback and version_arguments.
    'files' => array(
      'js' => array(
        'js/bootstrap-tour.js',
      ),
      'css' => array(
        'css/bootstrap-tour.min.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'js/bootstrap-tour.min.js',
          ),
          'css' => array(
            'css/bootstrap-tour.min.css',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'js/bootstrap-tour.js',
          ),
          'css' => array(
            'css/bootstrap-tour.css',
          ),
        ),
      ),
      'standalone' => array(
        'files' => array(
          'js' => array(
            'js/bootstrap-tour-standalone.js',
          ),
          'css' => array(
            'css/bootstrap-tour-standalone.min.css',
          ),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Remove tour cookies from session.
 */
function bootstrap_tour_cleanup() {
  if (isset($_SESSION['tour'])) {
    unset($_SESSION['tour']);
  }
  if (isset($_SESSION['nexttour'])) {
    unset($_SESSION['nexttour']);
  }
}

/**
 * Helper function to load a file from local disk or from remote url.
 *
 * @param string $type
 *   Js/css.
 * @param string $filename
 *   Name of the file to add.
 * @param string $uri
 *   File URI.
 */
function bootstrap_tour_load_file($type, $filename, $uri) {
  $file = 'public://' . $filename;
  $realfile = drupal_realpath($file);
  $options = NULL;
  if (!file_exists($realfile)) {
    global $base_url;
    $base = parse_url($base_url);
    $url = $base['scheme'] . '://' . $uri;
    if (system_retrieve_file($url, $file, FALSE, FILE_EXISTS_REPLACE) === FALSE) {
      // If we can't cache the file locally, use the remote CDN link.
      $file = $url;
      $options = 'external';
    }
  }
  if ($type == 'js') {
    drupal_add_js($file, $options);
  }
  else {
    drupal_add_css($file, $options);
  }
}

/**
 * Helper function to actually run a tour. Can be called from anywhere.
 */
function bootstrap_tour_run_tour($id, $force = FALSE) {
  $tour = bootstrap_tour_load($id);

  $steps = entity_load('field_collection_item', array_column($tour->field_bootstrap_tour_step[LANGUAGE_NONE], 'value'));
  reset($steps);
  $first_key = key($steps);

  if (!bootstrap_tour_access($tour) || empty($steps)) {
    bootstrap_tour_cleanup();
    return;
  }

  if ($tour->autorun && !empty($tour->start_path)) {
    if (drupal_match_path(current_path(), $tour->start_path)) {
      $steps[$first_key]->field_bs_tour_step_path[LANGUAGE_NONE]['value'] = current_path();
    }
    else {
      $steps[$first_key]->field_bs_tour_step_path[LANGUAGE_NONE]['value'] = $tour->start_path;
    }
  }
  $first_path = $steps[$first_key]->field_bs_tour_step_path[LANGUAGE_NONE]['value'];
  if (empty($first_path)) {
    bootstrap_tour_cleanup();
    return;
  }

  if (count($steps) > 1) {
    // Set this as the current tour in the session.
    $_SESSION['tour'] = $tour->name;
  }

  if (bootstrap_tour_match_path($first_path)) {
    if (empty($_GET['step']) || $_GET['step'] == 0) {
      // We're starting the tour over.
      if (isset($_SESSION['nexttour'])) {
        unset($_SESSION['nexttour']);
      }
    }
  }

  drupal_alter('bootstrap_tour', $tour);

  $step_path = '';
  $tour_config = new stdClass();
  $tour_config->name = $tour->name;
  $tour_config->wandered_off_message = $tour->wandered_off_message;
  $i = 0;
  foreach ($steps as &$step) {
    $step_config = new stdClass();
    // If a path isn't specified, then use the path from the previous step.
    if (!empty($step->field_bs_tour_step_path[LANGUAGE_NONE][0]['value'])) {
      $step_path = $step->field_bs_tour_step_path[LANGUAGE_NONE][0]['value'];
    }
    $step_config->path = $step_path;

    // Determine if we are on the first step of the tour.
    if (bootstrap_tour_match_path($step_config->path)) {
      if (!empty($_GET['tour']) && (empty($_GET['step']) || $_GET['step'] == 0)) {
        $tour_config->isFirstStep = TRUE;
      }
    }
    // Filter user supplied content.
    $step_config->title = field_view_value('field_collection_item', $step, 'field_bs_tour_step_title', field_get_items('field_collection_item', $step, 'field_bs_tour_step_title')[0])['#markup'];
    $step_config->content = field_view_value('field_collection_item', $step, 'field_bs_tour_step_content', field_get_items('field_collection_item', $step, 'field_bs_tour_step_content')[0])['#markup'];
    bootstrap_tour_match_token($step_config->path);

    $step_config->placement = $step->field_bs_tour_step_placement[LANGUAGE_NONE][0]['value'];
    $step_config->selector = $step->field_bs_tour_step_selector['und'][0]['value'];

    $tour_config->steps[$i] = $step_config;
    $i++;
  }

  $tour_config->current_path = current_path();
  $tour_config->force = $force;
  $tour_config->cleanUrls = variable_get('clean_url', 0);

  if (file_exists('public://js/bootstrap_tour/' . $tour->name . '.js')) {
    drupal_add_js('public://js/bootstrap_tour/' . $tour->name . '.js', array('weight' => 100));
  }

  drupal_add_js(array('bootstrapTour' => array('tour' => $tour_config)), 'setting');

  $variant = variable_get('bootstrap_tour_use_standalone') == 1 ? 'standalone' : NULL;
  if (module_exists('libraries') && ($library = libraries_detect('bootstrap_tour')) && !empty($library['installed'])) {
    libraries_load('bootstrap_tour', $variant);
  }
  else {
    $libraries = bootstrap_tour_libraries_info();
    drupal_alter('libraries_info', $libraries);
    $version = $libraries['bootstrap_tour']['version'];

    // Grab the Bootstrap Tour JS from CDNJS if the library isn't installed.
    if ($variant) {
      bootstrap_tour_load_file('css', 'bootstrap-tour-standalone.min.css', 'cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/' . $version . '/css/bootstrap-tour-standalone.min.css');
      bootstrap_tour_load_file('js', 'bootstrap-tour-standalone.js', 'cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/' . $version . '/js/bootstrap-tour-standalone.js');
    }
    else {
      bootstrap_tour_load_file('css', 'bootstrap-tour.min.css', 'cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/' . $version . '/css/bootstrap-tour.min.css');
      bootstrap_tour_load_file('js', 'bootstrap-tour.js', 'cdnjs.cloudflare.com/ajax/libs/bootstrap-tour/' . $version . '/js/bootstrap-tour.js');
    }
  }

  drupal_add_js(drupal_get_path('module', 'bootstrap_tour') . '/js/bootstrap-tour.js', array('scope' => 'footer'));
  drupal_add_css(drupal_get_path('module', 'bootstrap_tour') . '/css/bootstrap-tour.css', array('scope' => 'footer'));
}

/**
 * Implements hook_init().
 *
 * Load all the tours and figure out if any are set to auto-run
 * and start on the current page. If so, go ahead and run that one.
 */
function bootstrap_tour_page_build(&$page) {
  global $user;
  // Try and detect if we are in an AJAX request and bail if so.
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
    return;
  }

  $tours = bootstrap_tour_load_config();

  $watched_tours = array_flip(
    db_select('bootstrap_tour_user_status', 'u')
      ->fields('u', array('bootstrap_tour_id'))
      ->condition('u.status', 1)
      ->condition('u.uid', $user->uid)
      ->execute()
      ->fetchCol());

  $tours = array_diff_key($tours, $watched_tours);
  // Force a tour to run if the tour name is in the session vars.
  $current_name = !empty($_SESSION['tour']) ? $_SESSION['tour'] : NULL;
  // We can also jump to a new tour by specifying ?tour=tourname in the query
  // string, but only if it's the first step OR in the tour we were already
  // on. This is to prevent weird behavior if we switch domains on the same
  // site - ie. we shouldn't be able to start a new tour mid-stream.
  if (!empty($_GET['tour']) && ($_GET['tour'] == $current_name || empty($_GET['step']))) {
    $current_name = $_GET['tour'];
  }

  if (!empty($current_name)) {
    foreach ($tours as $id => $tour) {
      if ($tour->name == $current_name) {
        bootstrap_tour_run_tour($id, TRUE);
        return;
      }
    }
  }
  // Force the next tour to run if the tour name is in the session vars.
  if (!empty($_SESSION['nexttour'])) {
    foreach ($tours as $id => $tour) {
      if ($_SESSION['nexttour'] == $tour->name) {
        bootstrap_tour_run_tour($id, TRUE);
        return;
      }
    }
  }
  // Otherwise, only run the tour if it's set to auto-run
  // and we're on the path of one of the steps.
  foreach ($tours as $id => $tour) {
    if ($tour->autorun) {
      $path = $tour->start_path;
      if (bootstrap_tour_match_path($path)) {
        bootstrap_tour_run_tour($id);
      }
    }
  }
}

/**
 * Helper function to end the current tour.
 *
 * This lets multiple tours be set to autostart on the same path,
 * otherwise only the client knows if a tour has been watched.
 * @see bootstrap_tour_page_build();
 */
function bootstrap_tour_end_current_tour() {
  global $user;
  if ($tour_id = db_select('bootstrap_tour_tour', 'b')
    ->fields('b', array('bootstrap_tour_id'))
    ->condition('name', $_SESSION['tour'])
    ->execute()
    ->fetchField()
  ) {

    db_merge('bootstrap_tour_user_status')
      ->key(array('uid' => $user->uid, 'bootstrap_tour_id' => $tour_id))
      ->fields(array('status' => 1))
      ->execute();
    unset($_SESSION['tour']);
  }
}

/**
 * Helper function to restart a tour.
 *
 * @param string $tour_name
 *   The name of the tour that is being restarted.
 */
function bootstrap_tour_restart_tour($tour_name) {
  global $user;
  if ($tour_id = db_select('bootstrap_tour_tour', 'b')
    ->fields('b', array('bootstrap_tour_id'))
    ->condition('name', $tour_name)
    ->execute()
    ->fetchField()
  ) {
    db_merge('bootstrap_tour_user_status')
      ->key(array('uid' => $user->uid, 'bootstrap_tour_id' => $tour_id))
      ->fields(array('status' => 0))
      ->execute();
    $_SESSION['tour'] = $tour_name;
  }
  else {
    drupal_set_message('An error has occured. Please contact the site administrator if the issue persists.', 'error');
  }
}

/**
 * Helper function to get all tour names and ids in an array keyed by id.
 */
function bootstrap_tour_load_config($include_disabled = FALSE) {
  if (!$include_disabled) {
    $tours = db_query('SELECT bootstrap_tour_id, name, autorun, start_path FROM {bootstrap_tour_tour} WHERE enabled = 1')->fetchAllAssoc('bootstrap_tour_id');
  }
  else {
    $tours = db_query('SELECT bootstrap_tour_id, name, autorun, start_path FROM {bootstrap_tour_tour}')->fetchAllAssoc('bootstrap_tour_id');
  }

  return $tours;
}

/**
 * Callback function to load a complete bootstrap tour with all steps by id.
 */
function bootstrap_tour_load($id) {
  $tour = entity_load('bootstrap_tour', array($id));
  $tour = reset($tour);

  return $tour;
}

/**
 * Load all the tours (and caches them).
 */
function bootstrap_tour_load_all($reset = FALSE) {
  global $language;
  $all_tours = &drupal_static(__FUNCTION__);
  if (!isset($all_tours) || $reset) {
    if (!$reset && ($cache = cache_get('bootstrap_tours_all:' . $language->language))) {
      $all_tours = $cache->data;
    }
    else {
      $all_tours = entity_load('bootstrap_tour');
      cache_set('bootstrap_tours_all:' . $language->language, $all_tours);
    }
  }

  return $all_tours;
}

/**
 * Implements hook_bootstrap_tour_insert().
 */
function bootstrap_tour_bootstrap_tour_insert($tour) {
  bootstrap_tour_bootstrap_tour_update($tour);
}

/**
 * Implements hook_bootstrap_tour_insert().
 */
function bootstrap_tour_bootstrap_tour_update($tour) {
  cache_clear_all('bootstrap_tours_all', 'cache');
  drupal_static_reset('bootstrap_tour_load_all');
}

/**
 * Checks access for user for tour.
 *
 * @param int $tour
 *   Loaded tour event.
 * @param object|bool $account
 *   An account object, default to current user.
 *
 * @return bool
 *   True if user has access, false if they don't.
 */
function bootstrap_tour_access($tour, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  if (empty($tour) || empty($tour->enabled)) {
    return FALSE;
  }

  $access = TRUE;

  if ($account->uid != 1 && !empty($tour->roles)) {
    // Compare the tour's roles to the user's roles,
    // if there aren't any overlaps and the user isn't user 1
    // cancel running the tour.
    $tour_roles = explode(',', $tour->roles);
    $account_roles = array_keys($account->roles);
    $compare = array_intersect($tour_roles, $account_roles);
    if (empty($compare)) {
      $access = FALSE;
    }
  }

  $access_array = module_invoke_all('bootstrap_tour_access', $tour, $account, $access);
  return !in_array(FALSE, $access_array, TRUE) && $access;
}

/**
 * Helper function to check if path matches tour path.
 *
 * @param string $path
 *   The path to match.
 *
 * @return bool|string
 *   If matched, the detokenized path is returned, else FALSE is returned.
 */
function bootstrap_tour_match_path($path) {
  if ($path == '<front>' && request_path() == '') {
    return $path;
  }

  bootstrap_tour_match_token($path);

  if (current_path() == $path || request_path() == $path) {
    return $path;
  }

  return FALSE;
}

/**
 * Helper function to match and replace tokens in tour path.
 *
 * @param string $path
 *   The path to match.
 */
function bootstrap_tour_match_token(&$path) {
  if (!$path) {
    return;
  }

  global $user;
  $data = array();
  $pieces = explode('/', $path);

  if (in_array('node', $pieces)) {
    $data = array('node' => menu_get_object('node'));
  }

  elseif (in_array('user', $pieces)) {
    $data = array('user' => $user);
  }

  if (!empty($data)) {
    $path = token_replace($path, $data);
  }
}
