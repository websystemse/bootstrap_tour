<?php

/**
 * @TODO: Convert this to hook_page_build().
 */
function bootstrap_tour_init() {
  libraries_load('bootstrap_tour');
  drupal_add_js(drupal_get_path('module', 'bootstrap_tour') . '/js/bootstrap-tour.js');
  drupal_add_css(drupal_get_path('module', 'bootstrap_tour') . '/css/bootstrap-tour.css');
}

/**
 * Implementation of hook_menu()
 */
function bootstrap_tour_menu() {
  $items = array();
  $items['admin/build/tours'] = array(
    'title' => 'Site Tours',
    'description' => 'Create, edit and delete guided site tours',
    'page callback' => 'bootstrap_tour_list',
    'access arguments' => array('administer bootstrap tours'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/tours'] = array(
    'title' => 'Site Tours',
    'description' => 'Create, edit and delete guided site tours',
    'page callback' => 'bootstrap_tour_list',
    'access arguments' => array('administer bootstrap tours'),
  );
  $items['admin/structure/tours/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/tours/add'] = array(
    'title' => 'Add site tour',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_tour_form'),
    'access arguments' => array('administer bootstrap tours'),
    'type' => MENU_LOCAL_ACTION,
  );
  $items['admin/structure/tours/manage/%bootstrap_tour'] = array(
    'title' => 'Edit site tour',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bootstrap_tour_form', 4),
    'access arguments' => array('administer bootstrap tours'),
  );
  $items['admin/structure/tours/manage/%bootstrap_tour/edit'] = array(
    'title' => 'Edit site tour',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/tours/manage/%bootstrap_tour/delete'] = array(
    'title' => 'Delete site tour',
    'page arguments' => array('bootstrap_tour_delete_confirm', 4),
    'access arguments' => array('administer bootstrap tours'),
  );
  return $items;
}

/**
 * Implementation of hook_permission()
 */
function bootstrap_tour_permission() {
  return array(
    'administer bootstrap tours' => array(
      'title' => t('Administer bootstrap tours'),
      'description' => t('Create and edit Bootstrap Tours'),
    ),
  );
}

/**
 * Form callback for the administration of site tours.
 */
function bootstrap_tour_form($form, &$form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#description' => t('A human readable name for this site tour.'),
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#description' => t('Used for administrative purposes only.'),
  );

  $form['steps_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tour steps'),
    '#prefix' => '<div id="steps-fieldset-wrapper">',
    '#suffix' => '</div>',
  );
  if (empty($form_state['num_steps'])) {
    $form_state['num_steps'] = 1;
  }
  for ($i = 0; $i < $form_state['num_steps']; $i++) {
    $form['steps_fieldset'][$i . '_selector'] = array(
      '#type' => 'textfield',
      '#title' => t('CSS Selector'),
    );
    $form['steps_fieldset'][$i . '_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Popup Title'),
    );
    $form['steps_fieldset'][$i . '_content'] = array(
      '#type' => 'textfield',
      '#title' => t('Popup Content'),
    );
  }
  $form['add_step'] = array(
    '#type' => 'submit',
    '#value' => t('Add one more'),
    '#submit' => array('bootstrap_tour_form_add_one'),
    '#ajax' => array(
      'callback' => 'bootstrap_tour_form_add_one_callback',
      'wrapper' => 'steps-fieldset-wrapper',
    ),
    '#suffix' => ' ',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  return $form;
}

/**
 * AJAX callback to add one more step.
 */
function bootstrap_tour_form_add_one($form, &$form_state) {
  $form_state['num_steps']++;
  $form_state['rebuild'] = TRUE;
}

/**
 * AJAX callback to add one more step on button click.
 */
function bootstrap_tour_form_add_one_callback($form, $form_state) {
  return $form['steps_fieldset'];
}

/**
 * Submit callback for the Bootstrap Tour create/edit form.
 */
function bootstrap_tour_form_submit($form, &$form_state) {
  $vals = $form_state['values'];
  $tour = new stdClass();
  $tour->name = $vals['name'];
  $tour->description = $vals['description'];
  $i = 0;
  while (!empty($vals[$i . '_selector'])) {
    $tour->steps[] = array(
      'selector' => $vals[$i . '_selector'],
      'title' => $vals[$i . '_title'],
      'content' => $vals[$i . '_content'],
    );
    $i++;
  }
  drupal_write_record('bootstrap_tour', $tour);
}

/**
 * Callback function for admin/build/tours
 */
function bootstrap_tour_list() {
  $names = bootstrap_tour_load_all();
  $header = array(t('Name'), array('data' => t('Operations'), 'colspan' => '2'));
  $rows = array();

  foreach ($names as $key => $name) {
    $row[] = array('data' => $name);
    $row[] = array('data' => l(t('edit'), 'admin/structure/tours/manage/' . $name));
    $row[] = array('data' => l(t('delete'), 'admin/structure/tours/manage/' . $name . '/delete'));
    $rows[] = $row;
  }

  $build['tours_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No site tours available. <a href="@link">Add a site tour</a>.', array('@link' => url('admin/structure/tours/add'))),
  );

  return $build;
}

/**
 * Implementation of hook_libraries_info().
 * Tell Drupal about the Bootstrap Tour library.
 */
function bootstrap_tour_libraries_info() {
  $libraries['bootstrap_tour'] = array(
    'name' => 'Bootstrap Tour',
    'vendor url' => 'http://bootstraptour.com',
    'download url' => 'https://github.com/sorich87/bootstrap-tour/releases',
    'path' => 'build',
    'version' => '0.5.0', // @TODO: Move this into version_callback and version_arguments.
    'files' => array(
      'js' => array(
        'js/bootstrap-tour.min.js',
      ),
      'css' => array(
        'css/bootstrap-tour.min.css',
      ),
    ),
    'variants' => array(
      'minified' => array(
        'files' => array(
          'js' => array(
            'js/bootstrap-tour.min.js',
          ),
          'css' => array(
            'css/bootstrap-tour.min.css',
          ),
        ),
      ),
      'source' => array(
        'files' => array(
          'js' => array(
            'js/bootstrap-tour.js',
          ),
          'css' => array(
            'css/bootstrap-tour.css',
          ),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Callback function for loading all bootstrap tours in an array of 'btid' => 'name' format.
 * @TODO MAKE IT WORK MIKE. MAKE IT WORK.
 */
function bootstrap_tour_load_all($name = '') {
  $tours = array();
  $query = db_select('bootstrap_tour', 'bt');
  $query->fields('bt');
  $result = $query->execute();
  foreach ($result as $row) {
    $tours[$row->btid] = $row->name;
  }
  return $tours;
}

/**
* Callback function for loading one bootstrap tour by $name.
 */
function bootstrap_tour_load($name) {
  $tours = bootstrap_tour_load_all($name);
  return $tours;
}
